#include <iostream>
#include <ctime>
#include <fstream>
#include <string>
#include < stdio.h >
using namespace std;

struct Profile
{
	string full_name; // Фамилия Имя Отчество
	char sex;         // Пол: M/W
	int group;        // Номер группы
	int id;           // Номер студента в списке 
	int grades[8];    // Оценки за экзамены и диф. зачёты
	string date;
	string localOrNot;// Иногородний/нет(nonresident/local)
	int income;       // Доход семьи

};

void creatingRecord() {
	Profile student;
	cout << "ФИО: ";
	cin >> student.full_name;
	cout << "Группа: ";
	cin >> student.group;
	cout << "Номер в списке группы: ";
	cin >> student.id;
	cout << "Пол (Ж/М): ";
	cin >> student.sex;
	for (int i = 0; i < 8; i++)  cin >> student.grades[i];
	cout << "Иногородний/местный: ";
	cin >> student.localOrNot;
	cout << "Доход семьи: ";
	cin >> student.income;

	int temp = 0;
	for (int i = 0; i < 8; i++) // Так оценка 2 не может стоять в ведомости, идёт проверка
	{
		if (student.grades[i] == 2)
			temp++; // Найдена оценка 2, увеличиваем счётчик
	}
	if (temp == 0) // Если двоек не обнаружено
	{
		ofstream database; // Создаем поток записи в файл 
		// Открываем файл student с флагом записи в конец файла с сохранением содержимого файла
		database.open("student.txt", ios::app);
		if (!database.is_open()) // Если файл открыть не удалось 
			cout << '\n' << "Ошибка сохранения!"; // Выдаём соответсвующее сообщение
		else // Если файл успешно был открыт поочереди записываем всю информацию в файл.
		{
			database << student.full_name << '\n';
			database << student.group << '\n' << student.id << '\n' << student.sex << '\n';
			database << student.localOrNot << '\n';
			database << student.income << '\n';
			for (int i = 0; i < 8; i++)
				database << student.grades[i] << " ";
			database << '\n';

			database.close();
			cout << '\n' << "Профиль сохранен в datebase.";
		}
	}
	else // Если у студента есть неуд, информация о нем, не может быть сохранена, т.к. он должен быть отчислен
		cout << '\n' << "Этот студент должен быть отчислен. Профиль не сохранен в datebase.";
}

int countStudents()
{
	ifstream database("student.txt");
	if (database.is_open())
	{
		int temp = 0;
		string data;
		while (!database.eof())
		{
			getline(database, data);
			temp++;
		}
		database.close();
		int n;
		n = temp / 8;
		return n;
	}
	else return 0;
}

void priority() {
	char litter;
	ifstream database("student.txt");
	if (!database.is_open())
		cout << "Ошибка открытия файла!";
	else
	{
		int size;
		size = countStudents();
		if (size == 0)
			cout << "Datebase пуст." << endl;
		else
		{
			Profile* student = new Profile[size];
			for (int i = 0; i < size; i++) // Считываем данные всех студентов в массив структур
			{
				getline(database, student[i].full_name);
				database >> student[i].group >> student[i].id >> student[i].sex;
				database >> student[i].localOrNot;
				database >> student[i].income;
				for (int j = 0; j < 8; j++) {
					database >> student[i].grades[j];
				}
				database.get(litter);
				database.get(litter);
			}

			database.close(); // Закрываем файл

			for (int i = 0; i < size; i++)
			{
				if (student[i].localOrNot == "nonresident") {
					for (int i = 0; i < size; i++) {
						for (int j = 0; j < size - i - 1; j++) {
							if (student[j].income > student[j + 1].income)
								swap(student[j], student[j + 1]);
						}
					}
				}
			}

			for (int i = 0; i < size; i++)
			{
				for (int i = 0; i < size; i++) {
					for (int j = 0; j < size - i - 1; j++) {
						if (student[j].localOrNot == "local")
							swap(student[j], student[j + 1]);
					}
				}
			}
			for (int i = 0; i < size; i++) // Проходим по всем студентам
			{
				cout << student[i].full_name << '\n';
			}
			delete[] student; // Освобождаем динамическую память
		}
	}
}

void belown()
{
	int n; 
	char litter;
	cout << "Введите значение дохода:" << endl;
	cin >> n;
	ifstream database("student.txt");
	if (!database.is_open())
		cout << "Ошибка открытия файла!";
	else
	{
		int size;
		size = countStudents();
		if (size == 0)
			cout << "Datebase пуст." << endl;
		else
		{
			Profile* student = new Profile[size];
			for (int i = 0; i < size; i++) // Считываем данные всех студентов в массив структур
			{
				getline(database, student[i].full_name);
				database >> student[i].group >> student[i].id >> student[i].sex;
				database >> student[i].localOrNot;
				database >> student[i].income;
				for (int j = 0; j < 8; j++)
					database >> student[i].grades[j];
				database.get(litter);
				database.get(litter);
			}
			database.close(); // Закрываем файл
			int temp = 0;
			for (int i = 0; i < size; i++) // Проходим по всем студентам
			{
				if (student[i].income < n) // Фильтруем данные по необходимому признаку
				{
					cout << "ФИО: ";
					cout << student[i].full_name << '\n';
					cout << "Номер группы: ";
					cout << student[i].group << '\n';
					cout << "Номер в списке группы: ";
					cout << student[i].id << '\n';
					cout << "Пол (Ж/М): ";
					cout << student[i].sex << '\n';
					cout << "Оценки за семестр: ";
					for (int j = 0; j < 8; j++)
						cout << student[i].grades[j] << " ";
					cout << '\n';
					cout << "Иногородний/местный: ";
					cout << student[i].localOrNot << '\n';
					cout << "Доход семьи: ";
					cout << student[i].income << '\n';
					cout << "\n\n";
					temp++;
				}
			}
			if (temp == 0) // Если ни одной записи не найдено 
				cout << "Записи не найдены" << endl;
			delete[] student; // Освобождаем динамическую память 
		}
	}
}


int main() {
	int r;
	setlocale(0, "");
	while (true) {

		cout << "          Меню\n" <<
			"1 - Создать новую запись о студенте\n" <<
			"2 - Вывести приоритетный список на заселение в общежитие\n" <<
			"3 - Вывести информацию о студентах с доходом меньше n \n" <<
			"0 - Выйти из программы\n";
		cout << "Ваш выбор: ";
		cin >> r;
		cin.sync();
		if (r == 0) break;
		switch (r) {
		case 1:
			system("cls");
			cout << "Создание новой записи о студенте:\n";
			creatingRecord();
			system("pause");
			system("cls");
			break;
		case 2:
			system("cls");
			cout << "Вывод приоритетного списока на заселение в общежитие:\n";
			priority();
			system("pause");
			system("cls");
			break;
		case 3:
			system("cls");
			cout << "Вывод информации о студентах с доходом меньше n:\n";
			belown();
			system("pause");
			system("cls");
			break;
		}
	}
	return 0;
}
